var keys = [ [0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ];

var IPbox = [
        58,50,42,34,26,18,10,2,
        60,52,44,36,28,20,12,4,
        62,54,46,38,30,22,14,6,
        64,56,48,40,32,24,16,8,
        57,49,41,33,25,17,9,1,
        59,51,43,35,27,19,11,3,
        61,53,45,37,29,21,13,5,
        63,55,47,39,31,23,15,7
];

var Ebox = [
        32,1,2,3,4,5,
        4,5,6,7,8,9,
        8,9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32,1
];

var SBoxes = [
    [
        [14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],
        [0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],
        [4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],
        [15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]
    ],

    [
        [15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],
        [3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],
        [0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15],
        [13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]
    ],

    [
        [10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],
        [13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],
        [13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],
        [1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]
    ],

    [
        [7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],
        [13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],
        [10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4],
        [3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]
    ],

    [
        [2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],
        [14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],
        [4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],
        [11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]
    ],

    [
        [12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],
        [10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],
        [9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],
        [4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]
    ],

    [
        [4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],
        [13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],
        [1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],
        [6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]
    ],

    [
        [13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],
        [1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],
        [7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],
        [2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]
    ]
];

var PBox = [
    16,7,20,21,29,12,28,17,
    1,15,23,26,5,18,31,10,
    2,8,24,14,32,27,3,9,
    19,13,30,6,22,11,4,25
];

var FPbox = [
    40,8,48,16,56,24,64,32,
    39,7,47,15,55,23,63,31,
    38,6,46,14,54,22,62,30,
    37,5,45,13,53,21,61,29,
    36,4,44,12,52,20,60,28,
    35,3,43,11,51,19,59,27,
    34,2,42,10,50,18,58,26,
    33,1,41,9,49,17,57,25
];

var permuted_choice_1 = [
    57,49,41,33,25,17,9,1,
    58,50,42,34,26,18,10,2,
    59,51,43,35,27,19,11,3,
    60,52,44,36,63,55,47,39,
    31,23,15,7,62,54,46,38,
    30,22,14,6,61,53,45,37,
    29,21,13,5,28,20,12,4
];

var permuted_choice_2 = [
        14,17,11,24,1,5,3,28,
        15,6,21,10,23,19,12,4,
        26,8,16,7,27,20,13,2,
        41,52,31,37,47,55,30,40,
        51,45,33,48,44,49,39,56,
        34,53,46,42,50,36,29,32
];

var right_shifts = [ 0,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1 ];

var left_shifts = [ 1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1 ];

function extract(x,i) {
	if i < 32 then {
		return (x[1] // 2^i) and 1;
	}
	else {
		return (x[0] // 2^(i-32)) and 1;
	}
}

function initial_permutation(plain) {
    var result = [0,0];

    for var i in 0:64 do  {
        var a = 64 - IPbox[i];
        var b = 63 - i;

        if b > 31 then result[0] = result[0] or (extract(plain,a) * 2^(b-32));
        else result[1] = result[1] or (extract(plain,a) * 2^b);
    }

    return result;
}

function expansion(plain) {
    var result = [0,0];

    for var i in 0:48 do {
		
		var a = 32 - Ebox[i];
        var b = 47 - i;
		
		if b > 23 then result[0] = result[0] or ((plain // 2^a) and 1) * 2^(b-24);
        else result[1] = result[1] or ((plain // 2^a) and 1) * 2^b;
	}
	
    return result;
}

function row_calculation(input) {
    input = input and 33;
    var row = ((input // 2^4) and 2) + (input and 1);
    return row;
}

function column_calculation(input) {
    input = input and 30;
    var column = (input // 2^1) and 15;
    return column;
}

function sbox(input,box) {
    var row = row_calculation(input);
    var column = column_calculation(input);

    return SBoxes[box][row][column];
}

function pbox(input) {
    var result = 0;

    for var i in 0:32 do {
        result = result or ((input // 2^(32 - PBox[i])) and 1) * 2^(31 - i);
    }

    return result;
}

function f_function(plain, round) {
   	var result = 0;
    var expanded = expansion(plain);
	
	expanded[0] = expanded[0] xor keys[round][0];
	expanded[1] = expanded[1] xor keys[round][1];

    for var i in 0:8 do {
		var a = 42 - 6 * i;
		var input = 0;
		
		if a > 23 then input = (expanded[0] // 2^(a-24)) and 63;
		else input = (expanded[1] // 2^a) and 63;
		
        result = result or sbox(input, i) * 2^(28 - 4 * i);
    }

    return pbox(result);
}

function final_permutation(plain) {
    var result = [0,0];

    for var i in 0:64 do  {
        var a = 64 - FPbox[i];
        var b = 63 - i;

        if b > 31 then result[0] = result[0] or (extract(plain,a) * 2^(b-32));
        else result[1] = result[1] or (extract(plain,a) * 2^b);
    }

    return result;
}

function key_permuted_choice_1(array) {
    var result = [0,0];

    for var i in 0:56 do  {
		var a = 64 - permuted_choice_1[i];
        var b = 55 - i;
		
        if a < 32 then {
			if b > 27 then result[0] = result[0] or ((array[1] // 2^a) and 1) * 2^(b-28);
        	else result[1] = result[1] or ((array[1] // 2^a) and 1) * 2^b;
		}
		else {
			if b > 27 then result[0] = result[0] or ((array[0] // 2^(a-32)) and 1) * 2^(b-28);
        	else result[1] = result[1] or ((array[0] // 2^(a-32)) and 1) * 2^b;
		}
    }
    return result;
}

function leftshift(key, round) {
	var temp = 0;
	
    if left_shifts[round] == 2 then {
        temp = temp or ((key * 2^left_shifts[round]) and 268435452);
        temp = temp or (key // 2^26) and 3;
    }
    else {
        temp = temp or ((key * 2^left_shifts[round]) and 268435454);
        temp = temp or (key // 2^27) and 1;
		
    }
    return temp;
}

function key_permuted_choice_2(array, round) {
    var result = [0,0];

    for var i in 0:48 do {
		var a = 56 - permuted_choice_2[i];
        var b = 47 - i;
		
		if a < 28 then {
			if b > 23 then result[0] = result[0] or ((array[1] // 2^a) and 1) * 2^(b-24);
        	else result[1] = result[1] or ((array[1] // 2^a) and 1) * 2^b;
		}
		else {
			if b > 23 then result[0] = result[0] or ((array[0] // 2^(a-28)) and 1) * 2^(b-24);
        	else result[1] = result[1] or ((array[0] // 2^(a-28)) and 1) * 2^b;
		}
    }
    keys[round] = result;
}

function encryption_key_schedule(key) {
    var permuted_key = key_permuted_choice_1(key);
    for var i in 0:16 do {
		permuted_key[0] = leftshift(permuted_key[0], i);
        permuted_key[1] = leftshift(permuted_key[1], i);
        key_permuted_choice_2(permuted_key, i);
    }
}

function hex(inp){
	var consts = ["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];
	var string = "";
	for var i in 0:8 do {
		if inp != 0 and inp != null then {
			var temp = (inp // 2^(28-4*i)) and 15;
			string += consts[temp];
		}
		else string += "0";
	}
	return string;
}

function dec(inp) {
	var result = 0;
	var consts = "0123456789ABCDEF";
	for var i in 0:inp.size() do {
		for var l in 0:16 do {
			if inp[i] == consts[l] then result = result + l*16^(7-i);
		}
	}
	return result;
}

function convert(inp) {
	return [dec(inp[0:8]),dec(inp[8:16])];
}

function encrypt(plain,key) {
	plain = convert(plain);
	key = convert(key);
	
	encryption_key_schedule(key);
	var array = initial_permutation(plain);
	
	var left = array[0];
	var right = array[1];
	
	for var i in 0:16 do {
		var temp_right_site = f_function(right,i);
		var temp_left_site = temp_right_site xor left;
		
		left = right;
        right = temp_left_site;
	}
	print("0x"+hex(final_permutation([right,left])[0]) + hex(final_permutation([right,left])[1]));
	return "0x"+hex(final_permutation([right,left])[0]) + hex(final_permutation([right,left])[1]);
}

# only 8 byte key and 8 byte plain supported
# only use of uppercase letters supported
# encrypt("70617373776F7264","70617373776F7264") is equivalent to encrypt(b"password",b"password")
encrypt("70617373776F7264","70617373776F7264");

var temp = encrypt("70617373776F7264","70617373776F7264");
assert(temp == "0x94a012e6de4f1f0e");
temp = encrypt("511C68FBBBB19815","E1CF386227B9EB36");
assert(temp == "0xe0d2a76bbfad11d9");
temp = encrypt("8784C116426DF7DB","D8A135852E6D3C3E");
assert(temp == "0x95cf854b692aef68");
temp = encrypt("8FA1BEC76F45EC6F","343FE3CC86E62BB6");
assert(temp == "0x65a32c18a63ae847");
temp = encrypt("E82734AC189389F1","46A521D2AAC1A9A6");
assert(temp == "0x25706930265627cd");
temp = encrypt("766CF7B9298DC4A9","B3FAC11967A215E3");
assert(temp == "0xc6548d9528f470b6");
temp = encrypt("943CF115ADACA123","4115A84177962BD1");
assert(temp == "0x0e043434e80b0cf6");
temp = encrypt("CC9D59355A676EDF","43B59613473114B4");
assert(temp == "0x92a3a780d6d4239b");
temp = encrypt("167B67DC11C1D311","5F611D542E11AC68");
assert(temp == "0x663b13527aedf67a");
temp = encrypt("CA2965FF3FB28644","BE1F54625A2DD69D");
assert(temp == "0x987160524d576d5e");
temp = encrypt("14E7AB7262AA495D","7C17AFDD1A8BBA1D");
assert(temp == "0x3ea7090c2f41f976");
temp = encrypt("73BF3C159DF6A1B5","2A54355C92613BC1");
assert(temp == "0x7cdb16852d7436cc");
temp = encrypt("C8131127B7CF11F9","F8CA2FED8E1CC417");
assert(temp == "0xbaf0d2edae8425d1");
temp = encrypt("C3E1794F619DB3AF","21DEC895D91D3C42");
assert(temp == "0x1856809ee076061b");
temp = encrypt("99D31E89AA967311","6A9116176157E74C");
assert(temp == "0xd608b75e982ff4c1");
temp = encrypt("512FDA14859F715F","4E44744C117B634F");
assert(temp == "0x46e538dd93896daa");
temp = encrypt("2633CC2A374781F6","6AC6DB9C761631B9");
assert(temp == "0xb4029e4db42f884b");
temp = encrypt("2B1F56A62158A74A","18EAB4A2D2ED5511");
assert(temp == "0x37a9a75414bdc5f6");
temp = encrypt("6EBD84116C7CA1A5","3CA86778BB2296A1");
assert(temp == "0xc6a87a778cc66327");
temp = encrypt("D8755714521FA351","1111FB8E14F12113");
assert(temp == "0xef05115b8ab5646e");
temp = encrypt("3B894D68EF81D127","47D1823429196594");
assert(temp == "0x811c8ba2fd6f5316");
temp = encrypt("C15199A983D31C9F","E1D14E6A8E1B3815");
assert(temp == "0xf395c3b052a98082");
temp = encrypt("AE88FA95CA142FE2","CE63DA81A19F4925");
assert(temp == "0xd23fd0ed28df8ec3");
temp = encrypt("B1335514A1EC8121","BE27A145D2FA146D");
assert(temp == "0x14f591dee4397ffc");
temp = encrypt("5351D8899344361E","CC8EBBFD4E6DB46B");
assert(temp == "0xfb5f7a58c6e168b3");
temp = encrypt("C6E3A21E1DA9611D","F11B213D64143E58");
assert(temp == "0xac878c4f7ccc96c7");
temp = encrypt("8B79119ACA218B83","89B1836EE2D76A8F");
assert(temp == "0x0cf24fca2a3a9531");
temp = encrypt("BC31AF217EB98EB8","FE276DB2DA9F5BAB");
assert(temp == "0x03ffd065cdcba063");
temp = encrypt("98FAC91913691D14","9DE2C5A1F9474DED");
assert(temp == "0x5251a14451c64e81");
temp = encrypt("511786627FDB1162","353B896DBCA28A8A");
assert(temp == "0x96e810460435ae39");
temp = encrypt("37D1D75BF48AF242","5D311111C233A151");
assert(temp == "0xfe9003064e274d9d");
temp = encrypt("D5FB5A72D111278D","DFB4EC6817E54933");
assert(temp == "0x89aedb66f77c5d5a");
temp = encrypt("7D3CB2D25E2E4558","62E1E84F6481DE9C");
assert(temp == "0xb49f65dff9766446");
temp = encrypt("55FAF1518F612D1C","156A1261CAB3CCA2");
assert(temp == "0x81e3355daead90da");
temp = encrypt("FDC13AAE925931E1","45AF49A781856A17");
assert(temp == "0xad6ae8e57ed3438e");
temp = encrypt("33ACC499F3F4A211","CC19B1D6E39AAB71");
assert(temp == "0xad53c84b751ede10");
temp = encrypt("941C5E5FE847842D","67F86CEFFCC9E96C");
assert(temp == "0x51901e45ca7a5adf");
temp = encrypt("599EBC131A113F58","778C433A587F5BDD");
assert(temp == "0x7bfcc99a59193df1");
temp = encrypt("5B8F31145313753D","73B11D93C2DADD6D");
assert(temp == "0xc56fe14748d4fc37");
temp = encrypt("EDA2AFBA66A13A7E","5D165BD3CA693511");
assert(temp == "0x90a3e499d39ae7bc");
temp = encrypt("69EA1F8618A9C3CE","B4CB9C5F466DCEE7");
assert(temp == "0x69cd48ae86e975b5");
temp = encrypt("31851459FF9D5D71","91F6E37DF346683D");
assert(temp == "0x8190e0c2ce552474");
temp = encrypt("41E3C1DAC851F35A","9FDECB124AA6539B");
assert(temp == "0xf2da4c1fd106c768");
temp = encrypt("956D92BEDE65EAA8","8C2EB265DBCDEF6B");
assert(temp == "0xbbe95e2974e208c3");
temp = encrypt("7153CB7D698BE843","DD2B44142DB3A288");
assert(temp == "0x888a40df0cd1dade");
temp = encrypt("3CB4C13DF935A7C6","ED51ECF7CD19D151");
assert(temp == "0x0d89679bf8c7fe59");
temp = encrypt("BB81461FB2F886C1","C462A54F6294F853");
assert(temp == "0x38b1f3108fd1b80b");
temp = encrypt("5A4D431CA7944659","9912C6BD96179764");
assert(temp == "0x39f26298f5699d42");
temp = encrypt("DB4153B54F1172D2","DD95A71849BF4D4B");
assert(temp == "0x94e213c3baf2bc60");
temp = encrypt("41E35324E1AA4267","83761953315578B4");
assert(temp == "0x0694ef908c02b241");
temp = encrypt("B1518F619C189727","65A951A7A854F1F1");
assert(temp == "0x18f5829b347f9071");
temp = encrypt("31C2D61CD1A4F5A1","98121E2788249B67");
assert(temp == "0x2b3bfadc9b168015");
temp = encrypt("83DF1A48F75412EC","C1AA59B2FF397745");
assert(temp == "0x34bd70a19dbc362a");
temp = encrypt("6B131A22DE1CECC9","6572492DD8294369");
assert(temp == "0x49fb7543e5b3387a");
temp = encrypt("16E1C997F1CF4726","D98DC576DFF1BF9E");
assert(temp == "0x57a75831a544119a");
temp = encrypt("9DA9D152A7919A1B","D598231AB9529A77");
assert(temp == "0x22f6fddb838dcd57");
temp = encrypt("11AE8BC617263C92","5E82EEFA6B244A5A");
assert(temp == "0xb2381890fbfd5170");
temp = encrypt("F95CE29496E1512D","2617E12CBEF34CC1");
assert(temp == "0xddb17b053d761e4d");
temp = encrypt("EF6BA8C86B93ADCC","29914F8C223EE214");
assert(temp == "0x15ea9fc744c9fc5d");
temp = encrypt("91BA12CE1B555A58","6411F32B851C18AF");
assert(temp == "0xd90b07b4eb480020");
temp = encrypt("B72F8D3CEA2A41C2","E1D1A5115448396E");
assert(temp == "0xeb2ec2519b68edfb");
temp = encrypt("23D1DB5652AF313F","63C9125B693FF87F");
assert(temp == "0x650a0d227e6d7c83");
temp = encrypt("B19A48541549B4EC","B7657F98F64FA35B");
assert(temp == "0xe4dbccc7d3121d28");
temp = encrypt("5FD3D434CDF4546F","822AB3AAC556C7A3");
assert(temp == "0x6822dd4f20e65a79");
temp = encrypt("A79DCC34C1C35F17","CAD3E6A1B117E5A4");
assert(temp == "0x47280977c527f55d");
temp = encrypt("3135AB98C5AE773D","C6CECAA75118B1FF");
assert(temp == "0x1cb31e01345b482f");
temp = encrypt("E67C158F85CDD521","3F98D33A846A9737");
assert(temp == "0xd71f0711fc36f40e");
