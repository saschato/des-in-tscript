var keys = [ [0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0] ];

var IPbox = [
        58,50,42,34,26,18,10,2,
        60,52,44,36,28,20,12,4,
        62,54,46,38,30,22,14,6,
        64,56,48,40,32,24,16,8,
        57,49,41,33,25,17,9,1,
        59,51,43,35,27,19,11,3,
        61,53,45,37,29,21,13,5,
        63,55,47,39,31,23,15,7
];

var Ebox = [
        32,1,2,3,4,5,
        4,5,6,7,8,9,
        8,9,10,11,12,13,
        12,13,14,15,16,17,
        16,17,18,19,20,21,
        20,21,22,23,24,25,
        24,25,26,27,28,29,
        28,29,30,31,32,1
];

var SBoxes = [
    [
        [14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],
        [0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],
        [4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],
        [15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]
    ],

    [
        [15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],
        [3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],
        [0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15],
        [13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]
    ],

    [
        [10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],
        [13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],
        [13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],
        [1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]
    ],

    [
        [7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],
        [13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],
        [10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4],
        [3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]
    ],

    [
        [2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],
        [14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],
        [4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],
        [11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]
    ],

    [
        [12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],
        [10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],
        [9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],
        [4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]
    ],

    [
        [4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],
        [13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],
        [1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],
        [6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]
    ],

    [
        [13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],
        [1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],
        [7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],
        [2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]
    ]
];

var PBox = [
    16,7,20,21,29,12,28,17,
    1,15,23,26,5,18,31,10,
    2,8,24,14,32,27,3,9,
    19,13,30,6,22,11,4,25
];

var FPbox = [
    40,8,48,16,56,24,64,32,
    39,7,47,15,55,23,63,31,
    38,6,46,14,54,22,62,30,
    37,5,45,13,53,21,61,29,
    36,4,44,12,52,20,60,28,
    35,3,43,11,51,19,59,27,
    34,2,42,10,50,18,58,26,
    33,1,41,9,49,17,57,25
];

var permuted_choice_1 = [
    57,49,41,33,25,17,9,1,
    58,50,42,34,26,18,10,2,
    59,51,43,35,27,19,11,3,
    60,52,44,36,63,55,47,39,
    31,23,15,7,62,54,46,38,
    30,22,14,6,61,53,45,37,
    29,21,13,5,28,20,12,4
];

var permuted_choice_2 = [
    14,17,11,24,1,5,3,28,
    15,6,21,10,23,19,12,4,
    26,8,16,7,27,20,13,2,
    41,52,31,37,47,55,30,40,
    51,45,33,48,44,49,39,56,
    34,53,46,42,50,36,29,32
];

var right_shifts = [ 0,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1 ];

var left_shifts = [ 1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1 ];

function extract(x,i) {
	if i < 32 then {
		return (x[1] // 2^i) and 1;
	}
	else {
		return (x[0] // 2^(i-32)) and 1;
	}
}

function initial_permutation(plain) {
    var result = [0,0];

    for var i in 0:64 do  {
        var a = 64 - IPbox[i];
        var b = 63 - i;

        if b > 31 then result[0] = result[0] or (extract(plain,a) * 2^(b-32));
        else result[1] = result[1] or (extract(plain,a) * 2^b);
    }

    return result;
}

function row_calculation(input) {
    input = input and 33;
    var row = ((input // 2^4) and 2) + (input and 1);
    return row;
}

function column_calculation(input) {
    input = input and 30;
    var column = (input // 2^1) and 15;
    return column;
}

function sbox(input,box) {
    var row = row_calculation(input);
    var column = column_calculation(input);

    return SBoxes[box][row][column];
}

function pbox(input) {
    var result = 0;

    for var i in 0:32 do {
        result = result or ((input // 2^(32 - PBox[i])) and 1) * 2^(31 - i);
    }

    return result;
}

function expansion(plain) {
    var result = [0,0];

    for var i in 0:48 do {
		
		var a = 32 - Ebox[i];
        var b = 47 - i;
		
		if b > 31 then result[0] = result[0] or ((plain // 2^a) and 1) * 2^(b-32);
        else result[1] = result[1] or ((plain // 2^a) and 1) * 2^b;
	}
	
    return result;
}

function f_function(plain, round) {
   	var result = 0;
    var expanded = expansion(plain);
	
	expanded[0] = expanded[0] xor keys[round][0];
	expanded[1] = expanded[1] xor keys[round][1];

    for var i in 0:8 do {
		var a = 42 - 6 * i;
		var input = 0;
		
		if a > 31 then input = (expanded[0] // 2^(a-32)) and 63;
		else input = (expanded[1] // 2^a) and 63;
		
        result = result or sbox(input, i) * 2^(28 - 4 * i);
    }

    return pbox(result);
}

function final_permutation(array) {
    var result = [0,0];

    for var i in 0:64 do {
		var a = 64 - FPbox[i];
        var b = 63 - i;
		
		if a < 32 then {
			if b > 31 then result[0] = result[0] or ((array[1] // 2^a) and 1) * 2^(b-32);
        	else result[1] = result[1] or ((array[1] // 2^a) and 1) * 2^b;
		}
		else {
			if b > 31 then result[0] = result[0] or ((array[0] // 2^(a-32)) and 1) * 2^(b-32);
        	else result[1] = result[1] or ((array[0] // 2^(a-32)) and 1) * 2^b;
		}
    }

    return result;
}

function key_permuted_choice_1(array) {
    var result = [0,0];

    for var i in 0:56 do  {
		var a = 64 - permuted_choice_1[i];
        var b = 55 - i;
		
        if a < 32 then {
			if b > 27 then result[0] = result[0] or ((array[1] // 2^a) and 1) * 2^(b-28);
        	else result[1] = result[1] or ((array[1] // 2^a) and 1) * 2^b;
		}
		else {
			if b > 27 then result[0] = result[0] or ((array[0] // 2^(a-32)) and 1) * 2^(b-28);
        	else result[1] = result[1] or ((array[0] // 2^(a-32)) and 1) * 2^b;
		}
    }
    return result;
}


function key_permuted_choice_2(array, round) {
    var result = [0,0];

    for var i in 0:48 do {
		var a = 56 - permuted_choice_2[i];
        var b = 47 - i;
		
		if a < 28 then {
			if b > 23 then result[0] = result[0] or ((array[1] // 2^a) and 1) * 2^(b-24);
        	else result[1] = result[1] or ((array[1] // 2^a) and 1) * 2^b;
		}
		else {
			if b > 23 then result[0] = result[0] or ((array[0] // 2^(a-28)) and 1) * 2^(b-24);
        	else result[1] = result[1] or ((array[0] // 2^(a-28)) and 1) * 2^b;
		}
    }
    keys[round] = result;
}

function leftshift(key, round) {
	var temp = 0;
	
    if left_shifts[round] == 2 then {
        temp = temp or ((key * 2^left_shifts[round]) and 268435452);
        temp = temp or (key // 2^26) and 3;
    }
    else {
        temp = temp or ((key * 2^left_shifts[round]) and 268435454);
        temp = temp or (key // 2^27) and 1;
		
    }
    return temp;
}

function encryption_key_schedule(key) {
    var permuted_key = key_permuted_choice_1(key);
    for var i in 0:16 do {
		permuted_key[0] = leftshift(permuted_key[0], i);
        permuted_key[1] = leftshift(permuted_key[1], i);
        key_permuted_choice_2(permuted_key, i);
    }
}

function hex(inp){
	var consts = ["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];
	var string = "";
	for var i in 0:8 do {
		if inp != 0 and inp != null then {
			var temp = (inp // 2^(28-4*i)) and 15;
			string += consts[temp];
		}
		else string += "0";
	}
	return string;
}

function encrypt(plain,key) {
    encryption_key_schedule(key);

    plain = initial_permutation(plain);
	
	for var i in 0:16 do {
		print(hex(keys[i][0]) +  "  " + hex(keys[i][1]));	
	}

    for var i in 0:16 do {
		var temp_right_site = f_function(plain[1], i);
        var temp_left_site = plain[0] xor temp_right_site;

        plain[0] = plain[1];
        plain[1] = temp_left_site;
    }

}
encrypt([1885434739,2003792484],[1885434739,2003792484]);
